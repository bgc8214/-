package com.effective.apackage.packageeffective;

import android.os.Environment;
import android.app.ProgressDialog;
import android.widget.Toast;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;

import com.effective.apackage.packageeffective.domain.PackageValue;
import com.effective.apackage.packageeffective.utilities.NetworkUtil;

import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;

import java.text.SimpleDateFormat;
import java.util.Date;

public class GameMainActivity extends AppCompatActivity {

    private static final String TAG = GameMainActivity.class.getSimpleName();

    private ImageView mBNSImage;
    private ImageView mBrownDustImage;
    private ImageView mEpicSevenImage;
    private ImageView mSummonersWarImage;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_game_main);

        String fileDownloadUrl = NetworkUtil.getDownloadUrl() + "브라운더스트.json";
        Log.i(TAG, fileDownloadUrl);
        new DownloadFile().execute(fileDownloadUrl);

        mBNSImage = (ImageView) findViewById(R.id.blade_and_soul);
        mBrownDustImage = (ImageView) findViewById(R.id.brown_dust);
        mEpicSevenImage = (ImageView) findViewById(R.id.epic_seven);
        mSummonersWarImage = (ImageView) findViewById(R.id.summoners_war);

        mBNSImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Context context = GameMainActivity.this;

                Class packageActivity = PackageListActivity.class;

                Intent intent = new Intent(context,packageActivity);

                intent.putExtra(Intent.EXTRA_TEXT,"blade_and_soul");

                startActivity(intent);
            }
        });
        mBrownDustImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Context context = GameMainActivity.this;

                Class packageActivity = PackageListActivity.class;

                Intent intent = new Intent(context,packageActivity);

                intent.putExtra(Intent.EXTRA_TEXT,"brown_dust");

                startActivity(intent);
            }
        });
        mSummonersWarImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Context context = GameMainActivity.this;

                Class packageActivity = PackageListActivity.class;

                Intent intent = new Intent(context,packageActivity);

                intent.putExtra(Intent.EXTRA_TEXT,"summoners_war");

                startActivity(intent);
            }
        });
        mEpicSevenImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Context context = GameMainActivity.this;

                Class packageActivity = PackageListActivity.class;

                Intent intent = new Intent(context,packageActivity);

                intent.putExtra(Intent.EXTRA_TEXT,"에픽세븐");

                startActivity(intent);
            }
        });
    }

    public class FetchPackageTask extends AsyncTask<String, Void, ArrayList<PackageValue>> {


        @Override
        protected ArrayList<PackageValue> doInBackground(String... params) {


            return null;
        }

    }

    /**
     * Async Task to download file from URL
     */
    private class DownloadFile extends AsyncTask<String, String, String> {

        private ProgressDialog progressDialog;
        private String fileName;
        private String folder;
        private boolean isDownloaded;

        /**
         * Before starting background thread
         * Show Progress Bar Dialog
         */
        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            this.progressDialog = new ProgressDialog(GameMainActivity.this);
            this.progressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
            this.progressDialog.setCancelable(false);
            this.progressDialog.show();
        }

        /**
         * Downloading file in background thread
         */
        @Override
        protected String doInBackground(String... f_url) {
            int count;
            try {
                URL url = new URL(f_url[0]);
                URLConnection connection = url.openConnection();
                connection.connect();
                // getting file length
                int lengthOfFile = connection.getContentLength();
                Log.i(TAG, "file length : " + lengthOfFile);

                // input stream to read file - with 8k buffer
                InputStream input = new BufferedInputStream(url.openStream(), 8192);

                //Extract file name from URL
                fileName = f_url[0].substring(f_url[0].lastIndexOf('/') + 1, f_url[0].length());

                Log.i(TAG, "file name : " + fileName);
                //External directory path to save file
                folder = ApplicationContext.getAppContext().getFilesDir() + File.separator + "json" + File.separator;

                Log.i(TAG, "folder name : " + folder);
                //Create androiddeft folder if it does not exist
                File directory = new File(folder);

                if (!directory.exists()) {
                    directory.mkdirs();
                }

                // Output stream to write file
                FileOutputStream output = new FileOutputStream(folder + fileName);

                byte data[] = new byte[1024];

                long total = 0;

                while ((count = input.read(data)) != -1) {
                    total += count;
                    // publishing the progress....
                    // After this onProgressUpdate will be called
                    publishProgress("" + (int) ((total * 100) / lengthOfFile));
                    Log.d(TAG, "Progress: " + (int) ((total * 100) / lengthOfFile));

                    // writing data to file
                    output.write(data, 0, count);
                }

                // flushing output
                output.flush();

                // closing streams
                output.close();
                input.close();
                return "Downloaded at: " + folder + fileName;

            } catch (Exception e) {
                Log.e("Error: ", e.getMessage());
            }

            return "Something went wrong";
        }

        /**
         * Updating progress bar
         */
        protected void onProgressUpdate(String... progress) {
            // setting progress percentage
            progressDialog.setProgress(Integer.parseInt(progress[0]));
        }


        @Override
        protected void onPostExecute(String message) {
            // dismiss the dialog after the file was downloaded
            this.progressDialog.dismiss();

            // Display File path after downloading
            Toast.makeText(getApplicationContext(),
                    message, Toast.LENGTH_LONG).show();
        }
    }

}
